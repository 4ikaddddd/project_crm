{"ast":null,"code":"const API_URL = 'http://localhost:5102/api_3';\nexport const connectWebSocket = onMessage => {\n  const ws = new WebSocket('ws://localhost:5102');\n  ws.onopen = () => {\n    console.log('WebSocket connection opened');\n  };\n  ws.onmessage = event => {\n    const message = JSON.parse(event.data);\n    onMessage(message);\n  };\n  ws.onerror = error => {\n    console.error('WebSocket error:', error);\n  };\n  ws.onclose = () => {\n    console.log('WebSocket connection closed');\n  };\n  return ws;\n};\nexport async function joinChat(urls) {\n  console.log('Sending URLs:', urls);\n  const response = await fetch(`${API_URL}/subs/subscribe`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      urlsOrUsernames: urls.join(',')\n    })\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Failed to join chat');\n  }\n  return data;\n}\nexport async function fetchChats() {\n  const response = await fetch(`${API_URL}/parser/channels`);\n  return response.json();\n}\nexport async function createChats(chatData) {\n  const response = await fetch(`${API_URL}/parser/channel`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(chatData)\n  });\n  if (!response.ok) {\n    throw new Error(`Error creating chat: ${response.statusText}`);\n  }\n  return response.json();\n}\nexport async function deleteChat(id) {\n  const response = await fetch(`${API_URL}/parser/channel/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error(`Error deleting chat: ${response.statusText}`);\n  }\n  return response.json();\n}\n\n// Функция для получения списка ключевых слов\nexport async function fetchKeywords() {\n  const response = await fetch(`${API_URL}/filter_sms/keywords`);\n  if (!response.ok) {\n    throw new Error(`Error fetching keywords: ${response.statusText}`);\n  }\n  return response.json();\n}\nexport async function addKeyword(keyword) {\n  try {\n    const response = await fetch(`${API_URL}/filter_sms/keywords`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        keyword\n      }) // Передаем строку в JSON-формате\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Ошибка при добавлении ключевого слова: ${errorData.message}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Ошибка при добавлении ключевого слова:', error);\n    throw error;\n  }\n}\n\n// Функция для удаления ключевого слова\nexport async function deleteKeyword(id) {\n  const response = await fetch(`${API_URL}/filter_sms/keywords/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error(`Error deleting keyword: ${response.statusText}`);\n  }\n  return response.json();\n}\nexport async function getSubscriptions() {\n  const response = await fetch(`${API_URL}/subs/subscriptions`);\n  if (!response.ok) {\n    throw new Error(`Error fetching subscriptions: ${response.statusText}`);\n  }\n  return response.json();\n}\n// Функция для получения списка чатов\nexport async function getChatList() {\n  const response = await fetch(`${API_URL}/parser/chats`);\n  if (!response.ok) {\n    throw new Error(`Error fetching chats: ${response.statusText}`);\n  }\n  return response.json();\n}\n\n// Функция для создания чатов\nexport async function addChat(chatData) {\n  const response = await fetch(`${API_URL}/parser/chat`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(chatData)\n  });\n  if (!response.ok) {\n    throw new Error(`Error creating chat: ${response.statusText}`);\n  }\n  return response.json();\n}\n// Функция для получения списка сообщений\nexport async function fetchMessages(query = '') {\n  const response = await fetch(`${API_URL}/filter_sms/messages${query ? `?${query}` : ''}`);\n  if (!response.ok) {\n    throw new Error(`Error fetching messages: ${response.statusText}`);\n  }\n  return response.json();\n}\n// Функция для удаления чата\nexport async function removeChat(id) {\n  const response = await fetch(`${API_URL}/parser/chat/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error(`Error deleting chat: ${response.statusText}`);\n  }\n  return response.json();\n}","map":{"version":3,"names":["API_URL","connectWebSocket","onMessage","ws","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","onerror","error","onclose","joinChat","urls","response","fetch","method","headers","body","stringify","urlsOrUsernames","join","json","ok","Error","fetchChats","createChats","chatData","statusText","deleteChat","id","fetchKeywords","addKeyword","keyword","errorData","deleteKeyword","getSubscriptions","getChatList","addChat","fetchMessages","query","removeChat"],"sources":["D:/Project/Rus_Project+/tg/src/components/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5102/api_3';\r\n\r\nexport const connectWebSocket = (onMessage) => {\r\n  const ws = new WebSocket('ws://localhost:5102');\r\n\r\n  ws.onopen = () => {\r\n    console.log('WebSocket connection opened');\r\n  };\r\n\r\n  ws.onmessage = (event) => {\r\n    const message = JSON.parse(event.data);\r\n    onMessage(message);\r\n  };\r\n\r\n  ws.onerror = (error) => {\r\n    console.error('WebSocket error:', error);\r\n  };\r\n\r\n  ws.onclose = () => {\r\n    console.log('WebSocket connection closed');\r\n  };\r\n\r\n  return ws;\r\n};\r\n\r\nexport async function joinChat(urls) {\r\n  console.log('Sending URLs:', urls);\r\n\r\n  const response = await fetch(`${API_URL}/subs/subscribe`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ urlsOrUsernames: urls.join(',') }),\r\n  });\r\n\r\n  const data = await response.json();\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Failed to join chat');\r\n  }\r\n  return data;\r\n}\r\n\r\nexport async function fetchChats() {\r\n  const response = await fetch(`${API_URL}/parser/channels`);\r\n  return response.json();\r\n}\r\n\r\nexport async function createChats(chatData) {\r\n  const response = await fetch(`${API_URL}/parser/channel`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(chatData),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error creating chat: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function deleteChat(id) {\r\n  const response = await fetch(`${API_URL}/parser/channel/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error deleting chat: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\n// Функция для получения списка ключевых слов\r\nexport async function fetchKeywords() {\r\n  const response = await fetch(`${API_URL}/filter_sms/keywords`);\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching keywords: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function addKeyword(keyword) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/filter_sms/keywords`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ keyword }), // Передаем строку в JSON-формате\r\n    });\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(`Ошибка при добавлении ключевого слова: ${errorData.message}`);\r\n    }\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error('Ошибка при добавлении ключевого слова:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n// Функция для удаления ключевого слова\r\nexport async function deleteKeyword(id) {\r\n  const response = await fetch(`${API_URL}/filter_sms/keywords/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error deleting keyword: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function getSubscriptions() {\r\n  const response = await fetch(`${API_URL}/subs/subscriptions`);\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching subscriptions: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n// Функция для получения списка чатов\r\nexport async function getChatList() {\r\n  const response = await fetch(`${API_URL}/parser/chats`);\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching chats: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\n// Функция для создания чатов\r\nexport async function addChat(chatData) {\r\n  const response = await fetch(`${API_URL}/parser/chat`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(chatData),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error creating chat: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n// Функция для получения списка сообщений\r\nexport async function fetchMessages(query = '') {\r\n  const response = await fetch(`${API_URL}/filter_sms/messages${query ? `?${query}` : ''}`);\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching messages: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n// Функция для удаления чата\r\nexport async function removeChat(id) {\r\n  const response = await fetch(`${API_URL}/parser/chat/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error deleting chat: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}