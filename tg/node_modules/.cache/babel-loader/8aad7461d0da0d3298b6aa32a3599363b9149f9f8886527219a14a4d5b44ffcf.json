{"ast":null,"code":"const API_URL='https://test3.cola-workeu.com/api_1';export const connectWebSocket=onMessage=>{const ws=new WebSocket('ws://localhost:5000');ws.onopen=()=>{console.log('WebSocket connection opened');};ws.onmessage=event=>{const message=JSON.parse(event.data);onMessage(message);};ws.onerror=error=>{console.error('WebSocket error:',error);};ws.onclose=()=>{console.log('WebSocket connection closed');};return ws;};export async function joinChat(urls){console.log('Sending URLs:',urls);const response=await fetch(\"\".concat(API_URL,\"/subs/subscribe\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({urlsOrUsernames:urls.join(',')})});const data=await response.json();if(!response.ok){throw new Error(data.message||'Failed to join chat');}return data;}export async function fetchChats(){const response=await fetch(\"\".concat(API_URL,\"/parser/channels\"));return response.json();}export async function createChats(chatData){const response=await fetch(\"\".concat(API_URL,\"/parser/channel\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(chatData)});if(!response.ok){throw new Error(\"Error creating chat: \".concat(response.statusText));}return response.json();}export async function deleteChat(id){const response=await fetch(\"\".concat(API_URL,\"/parser/channel/\").concat(id),{method:'DELETE'});if(!response.ok){throw new Error(\"Error deleting chat: \".concat(response.statusText));}return response.json();}// Функция для получения списка ключевых слов\nexport async function fetchKeywords(){const response=await fetch(\"\".concat(API_URL,\"/filter_sms/keywords\"));if(!response.ok){throw new Error(\"Error fetching keywords: \".concat(response.statusText));}return response.json();}export async function addKeyword(keyword){try{const response=await fetch(\"\".concat(API_URL,\"/filter_sms/keywords\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({keyword})// Передаем строку в JSON-формате\n});if(!response.ok){const errorData=await response.json();throw new Error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0438 \\u043A\\u043B\\u044E\\u0447\\u0435\\u0432\\u043E\\u0433\\u043E \\u0441\\u043B\\u043E\\u0432\\u0430: \".concat(errorData.message));}return response.json();}catch(error){console.error('Ошибка при добавлении ключевого слова:',error);throw error;}}// Функция для удаления ключевого слова\nexport async function deleteKeyword(id){const response=await fetch(\"\".concat(API_URL,\"/filter_sms/keywords/\").concat(id),{method:'DELETE'});if(!response.ok){throw new Error(\"Error deleting keyword: \".concat(response.statusText));}return response.json();}export async function getSubscriptions(){const response=await fetch(\"\".concat(API_URL,\"/subs/subscriptions\"));if(!response.ok){throw new Error(\"Error fetching subscriptions: \".concat(response.statusText));}return response.json();}// Функция для получения списка чатов\nexport async function getChatList(){const response=await fetch(\"\".concat(API_URL,\"/parser/chats\"));if(!response.ok){throw new Error(\"Error fetching chats: \".concat(response.statusText));}return response.json();}// Функция для создания чатов\nexport async function addChat(chatData){const response=await fetch(\"\".concat(API_URL,\"/parser/chat\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(chatData)});if(!response.ok){throw new Error(\"Error creating chat: \".concat(response.statusText));}return response.json();}// Функция для получения списка сообщений\nexport async function fetchMessages(){let query=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';const response=await fetch(\"\".concat(API_URL,\"/filter_sms/messages\").concat(query?\"?\".concat(query):''));if(!response.ok){throw new Error(\"Error fetching messages: \".concat(response.statusText));}return response.json();}// Функция для удаления чата\nexport async function removeChat(id){const response=await fetch(\"\".concat(API_URL,\"/parser/chat/\").concat(id),{method:'DELETE'});if(!response.ok){throw new Error(\"Error deleting chat: \".concat(response.statusText));}return response.json();}","map":{"version":3,"names":["API_URL","connectWebSocket","onMessage","ws","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","onerror","error","onclose","joinChat","urls","response","fetch","concat","method","headers","body","stringify","urlsOrUsernames","join","json","ok","Error","fetchChats","createChats","chatData","statusText","deleteChat","id","fetchKeywords","addKeyword","keyword","errorData","deleteKeyword","getSubscriptions","getChatList","addChat","fetchMessages","query","arguments","length","undefined","removeChat"],"sources":["D:/Project/Yes/tg/src/components/api.js"],"sourcesContent":["const API_URL = 'https://test3.cola-workeu.com/api_1';\r\n\r\nexport const connectWebSocket = (onMessage) => {\r\n  const ws = new WebSocket('ws://localhost:5000');\r\n\r\n  ws.onopen = () => {\r\n    console.log('WebSocket connection opened');\r\n  };\r\n\r\n  ws.onmessage = (event) => {\r\n    const message = JSON.parse(event.data);\r\n    onMessage(message);\r\n  };\r\n\r\n  ws.onerror = (error) => {\r\n    console.error('WebSocket error:', error);\r\n  };\r\n\r\n  ws.onclose = () => {\r\n    console.log('WebSocket connection closed');\r\n  };\r\n\r\n  return ws;\r\n};\r\n\r\nexport async function joinChat(urls) {\r\n  console.log('Sending URLs:', urls);\r\n\r\n  const response = await fetch(`${API_URL}/subs/subscribe`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ urlsOrUsernames: urls.join(',') }),\r\n  });\r\n\r\n  const data = await response.json();\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Failed to join chat');\r\n  }\r\n  return data;\r\n}\r\n\r\nexport async function fetchChats() {\r\n  const response = await fetch(`${API_URL}/parser/channels`);\r\n  return response.json();\r\n}\r\n\r\nexport async function createChats(chatData) {\r\n  const response = await fetch(`${API_URL}/parser/channel`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(chatData),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error creating chat: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function deleteChat(id) {\r\n  const response = await fetch(`${API_URL}/parser/channel/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error deleting chat: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\n// Функция для получения списка ключевых слов\r\nexport async function fetchKeywords() {\r\n  const response = await fetch(`${API_URL}/filter_sms/keywords`);\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching keywords: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function addKeyword(keyword) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/filter_sms/keywords`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ keyword }), // Передаем строку в JSON-формате\r\n    });\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(`Ошибка при добавлении ключевого слова: ${errorData.message}`);\r\n    }\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error('Ошибка при добавлении ключевого слова:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n// Функция для удаления ключевого слова\r\nexport async function deleteKeyword(id) {\r\n  const response = await fetch(`${API_URL}/filter_sms/keywords/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error deleting keyword: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function getSubscriptions() {\r\n  const response = await fetch(`${API_URL}/subs/subscriptions`);\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching subscriptions: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n// Функция для получения списка чатов\r\nexport async function getChatList() {\r\n  const response = await fetch(`${API_URL}/parser/chats`);\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching chats: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\n// Функция для создания чатов\r\nexport async function addChat(chatData) {\r\n  const response = await fetch(`${API_URL}/parser/chat`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(chatData),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error creating chat: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n// Функция для получения списка сообщений\r\nexport async function fetchMessages(query = '') {\r\n  const response = await fetch(`${API_URL}/filter_sms/messages${query ? `?${query}` : ''}`);\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching messages: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}\r\n// Функция для удаления чата\r\nexport async function removeChat(id) {\r\n  const response = await fetch(`${API_URL}/parser/chat/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error deleting chat: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}